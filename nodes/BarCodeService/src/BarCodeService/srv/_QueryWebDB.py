"""autogenerated by genmsg_py from QueryWebDBRequest.msg. Do not edit."""
import roslib.message
import struct


class QueryWebDBRequest(roslib.message.Message):
  _md5sum = "6b31696d7592100226b848a5648c6177"
  _type = "BarCodeService/QueryWebDBRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string                   gtin

"""
  __slots__ = ['gtin']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       gtin
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(QueryWebDBRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gtin is None:
        self.gtin = ''
    else:
      self.gtin = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.gtin
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.gtin = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.gtin
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.gtin = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from QueryWebDBResponse.msg. Do not edit."""
import roslib.message
import struct

import BarCodeService.msg
import roslib.rostime

class QueryWebDBResponse(roslib.message.Message):
  _md5sum = "58157e74887c72e948bfdc217aa315ad"
  _type = "BarCodeService/QueryWebDBResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """BarCodeService/DBEntry[] data


================================================================================
MSG: BarCodeService/DBEntry
# Product information
string   product
string   type
string   description
string   additional_info
string   size
string[] images

# Company information
string   origin
string   originCode
string   company
string   company_alternate
string   upc8
string   upc12
string   ean13

# Entry information
string   language
time     added
time     modified
string   dbclass

"""
  __slots__ = ['data']
  _slot_types = ['BarCodeService/DBEntry[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       data
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(QueryWebDBResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = []
    else:
      self.data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1.product
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.type
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.additional_info
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.size
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.images)
        buff.write(_struct_I.pack(length))
        for val2 in val1.images:
          length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _x = val1.origin
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.originCode
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.company
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.company_alternate
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.upc8
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.upc12
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ean13
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.language
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.added
        _x = _v1
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _v2 = val1.modified
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.dbclass
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = BarCodeService.msg.DBEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.product = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.description = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.additional_info = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.size = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.images = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2 = str[start:end]
          val1.images.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.origin = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.originCode = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.company = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.company_alternate = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.upc8 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.upc12 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.ean13 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.language = str[start:end]
        _v3 = val1.added
        _x = _v3
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _v4 = val1.modified
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.dbclass = str[start:end]
        self.data.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1.product
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.type
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.additional_info
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.size
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.images)
        buff.write(_struct_I.pack(length))
        for val2 in val1.images:
          length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _x = val1.origin
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.originCode
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.company
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.company_alternate
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.upc8
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.upc12
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ean13
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.language
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.added
        _x = _v5
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _v6 = val1.modified
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.dbclass
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = BarCodeService.msg.DBEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.product = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.description = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.additional_info = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.size = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.images = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2 = str[start:end]
          val1.images.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.origin = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.originCode = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.company = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.company_alternate = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.upc8 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.upc12 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.ean13 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.language = str[start:end]
        _v7 = val1.added
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _v8 = val1.modified
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.dbclass = str[start:end]
        self.data.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2I = struct.Struct("<2I")
class QueryWebDB(roslib.message.ServiceDefinition):
  _type          = 'BarCodeService/QueryWebDB'
  _md5sum = '1ff982dd252102d7397f0fb3d6eaad7c'
  _request_class  = QueryWebDBRequest
  _response_class = QueryWebDBResponse
