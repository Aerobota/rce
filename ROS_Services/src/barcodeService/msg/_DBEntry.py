"""autogenerated by genmsg_py from DBEntry.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime

class DBEntry(roslib.message.Message):
  _md5sum = "4e457137bbc66f83f36c300abc523543"
  _type = "barcodeService/DBEntry"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Product information
string   product
string   type
string   description
string   additional_info
string   size
string[] images

# Company information
string   origin
string   originCode
string   company
string   company_alternate
string   upc8
string   upc12
string   ean13

# Entry information
string   language
time     added
time     modified
string   dbclass

"""
  __slots__ = ['product','type','description','additional_info','size','images','origin','originCode','company','company_alternate','upc8','upc12','ean13','language','added','modified','dbclass']
  _slot_types = ['string','string','string','string','string','string[]','string','string','string','string','string','string','string','string','time','time','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       product,type,description,additional_info,size,images,origin,originCode,company,company_alternate,upc8,upc12,ean13,language,added,modified,dbclass
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(DBEntry, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.product is None:
        self.product = ''
      if self.type is None:
        self.type = ''
      if self.description is None:
        self.description = ''
      if self.additional_info is None:
        self.additional_info = ''
      if self.size is None:
        self.size = ''
      if self.images is None:
        self.images = []
      if self.origin is None:
        self.origin = ''
      if self.originCode is None:
        self.originCode = ''
      if self.company is None:
        self.company = ''
      if self.company_alternate is None:
        self.company_alternate = ''
      if self.upc8 is None:
        self.upc8 = ''
      if self.upc12 is None:
        self.upc12 = ''
      if self.ean13 is None:
        self.ean13 = ''
      if self.language is None:
        self.language = ''
      if self.added is None:
        self.added = roslib.rostime.Time()
      if self.modified is None:
        self.modified = roslib.rostime.Time()
      if self.dbclass is None:
        self.dbclass = ''
    else:
      self.product = ''
      self.type = ''
      self.description = ''
      self.additional_info = ''
      self.size = ''
      self.images = []
      self.origin = ''
      self.originCode = ''
      self.company = ''
      self.company_alternate = ''
      self.upc8 = ''
      self.upc12 = ''
      self.ean13 = ''
      self.language = ''
      self.added = roslib.rostime.Time()
      self.modified = roslib.rostime.Time()
      self.dbclass = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.product
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.description
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.additional_info
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.size
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.images)
      buff.write(_struct_I.pack(length))
      for val1 in self.images:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.origin
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.originCode
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.company
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.company_alternate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.upc8
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.upc12
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ean13
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.language
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I.pack(_x.added.secs, _x.added.nsecs, _x.modified.secs, _x.modified.nsecs))
      _x = self.dbclass
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.added is None:
        self.added = roslib.rostime.Time()
      if self.modified is None:
        self.modified = roslib.rostime.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.product = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.additional_info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.size = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.images = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.images.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.origin = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.originCode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.company = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.company_alternate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.upc8 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.upc12 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.ean13 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.language = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.added.secs, _x.added.nsecs, _x.modified.secs, _x.modified.nsecs,) = _struct_4I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.dbclass = str[start:end]
      self.added.canon()
      self.modified.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.product
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.description
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.additional_info
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.size
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.images)
      buff.write(_struct_I.pack(length))
      for val1 in self.images:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.origin
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.originCode
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.company
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.company_alternate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.upc8
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.upc12
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ean13
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.language
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I.pack(_x.added.secs, _x.added.nsecs, _x.modified.secs, _x.modified.nsecs))
      _x = self.dbclass
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.added is None:
        self.added = roslib.rostime.Time()
      if self.modified is None:
        self.modified = roslib.rostime.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.product = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.additional_info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.size = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.images = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.images.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.origin = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.originCode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.company = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.company_alternate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.upc8 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.upc12 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.ean13 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.language = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.added.secs, _x.added.nsecs, _x.modified.secs, _x.modified.nsecs,) = _struct_4I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.dbclass = str[start:end]
      self.added.canon()
      self.modified.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4I = struct.Struct("<4I")
