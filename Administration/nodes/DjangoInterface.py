#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#       DjangoInterface.py
#       
#       Copyright 2011 dominique hunziker <dominique.hunziker@gmail.com>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#       
#       

# ROS specific imports
import roslib; roslib.load_manifest('Administration')
import rospy
from Administration.srv import getService, \
addEnvironment, getEnvironment, removeEnvironment, \
addTask, getTask, removeTask, \
addNode

# Python specific imports
import json

# Custom imports
import settings
from MessageUtility import preprocessFiles, genericService, postprocessResponse, InvalidRequest, InternalError, FatalError

""" The django interface functions have the following constraints:
    @param envID:   Environment ID which was generated by the
                    Administration in a previous request.
    @type  envID:   str
    
    @param taskID:  Task ID which was generated by the Administration
                    in a previous request.
    @type  taskID:  str
    
    @param data:    String which is a json formatted string containing
                    all relevant data for the request.
    @type  data:    str
    
    @param files:   Instance variable request.FILES from a POST request
                    converted into a dict containing only
                    cStringIO.StringIO objects instead UploadedFile
                    instances from django/piston.
    @type  files:   { str : [cStringIO.StringO] }
    
    @return:    If necessary a message
    @rtype:     str / None
    
    @raise:     InternalError
    @raise:     InvalidRequest
"""

def readService():
    """ This function is used when a 'GET' request on service level has
        to be processed.
    """
    try:
        rospy.wait_for_service('getService', timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
    except rospy.ROSException:
        raise InternalError('Could not find ROS Administration.')
    
    return json.loads(genericService('getService', getService))

def createEnvironment(envID, data, files):
    """ This function is used when a 'POST' request on service level has
        to be processed.
    """
    try:
        rospy.wait_for_service('addEnvironment', timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
    except rospy.ROSException:
        raise InternalError('Could not find ROS Administration.')
    
    if not envID:
        IDcreated = True
        result = json.loads(genericService('addEnvironment', addEnvironment))
        envID = result['envID']
    else:
        IDcreated = False
        result = { 'envID' : envID }
    
    if data:
        try:
            try:
                rospy.wait_for_service('{0}/addNode'.format(envID), timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
            except rospy.ROSException:
                raise InvalidRequest('Could not find environment.')
            
            genericService('{0}/addNode'.format(envID), addNode, data=data, files=preprocessFiles(files))
        except (InvalidRequest, InternalError):
            if IDcreated:
                deleteEnvironment(envID)
            raise
    
    return result

def readEnvironment(envID):
    """ This function is used when a 'GET' request on environment level
        has to be processed.
    """
    try:
        rospy.wait_for_service('{0}/getEnvironment'.format(envID), timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
    except rospy.ROSException:
        raise InvalidRequest('Could not find environment.')
    
    return genericService('{0}/getEnvironment'.format(envID), getEnvironment)

def deleteEnvironment(envID):
    """ This function is used when a 'DELETE' request on environment level
        has to be processed.
    """
    try:
        rospy.wait_for_service('removeEnvironment', timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
    except rospy.ROSException:
        raise InternalError('Could not find ROS Administration.')
    
    genericService('removeEnvironment', removeEnvironment, envID=envID)

def createTask(envID, taskID, data, files):
    """ This function is used when a 'POST' request on environment level
        has to be processed.
    """
    try:
        rospy.wait_for_service('{0}/addTask'.format(envID), timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
    except rospy.ROSException:
        raise InvalidRequest('Could not find environment.')
    
    return json.loads(genericService('{0}/addTask'.format(envID), addTask, taskID=taskID, data=data, files=preprocessFiles(files)))

def readTask(envID, taskID):
    """ This function is used when a 'GET' request on task level has to
        be processed.
    """
    try:
        rospy.wait_for_service('{0}/getTask'.format(envID), timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
    except rospy.ROSException:
        raise InvalidRequest('Could not find environment.')
    
    return postprocessResponse(genericService('{0}/getTask'.format(envID), getTask, taskID=taskID))

def deleteTask(envID, taskID):
    """ This function is used when a 'DELETE' request on task level has
        to be processed.
    """
    try:
        rospy.wait_for_service('{0}/removeTask'.format(envID), timeout=settings.WAIT_FOR_SERVICE_TIMEOUT)
    except rospy.ROSException:
        raise InvalidRequest('Could not find environment.')
    
    return genericService('{0}/removeTask'.format(envID), removeTask, taskID=taskID)
