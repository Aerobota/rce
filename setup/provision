#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#     setup/provision
#
#     This file is part of the RoboEarth Cloud Engine framework.
#
#     This file was originally created for RoboEearth
#     http://www.roboearth.org/
#
#     The research leading to these results has received funding from
#     the European Union Seventh Framework Programme FP7/2007-2013 under
#     grant agreement no248942 RoboEarth.
#
#     Copyright 2013 RoboEarth
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
#     \author/s: Dhananjay Sathe
#
#

# Python specific imports
import os
import sys
import readline
import glob
from subprocess import check_call
from ConfigParser import SafeConfigParser


# Setup the python interpreter path autocomplete.
def complete(text, state):
    return (glob.glob(text + '*') + [None])[state]

readline.set_completer_delims(' \t\n;')
readline.parse_and_bind("tab: complete")
readline.set_completer(complete)


# Interactive input functions
def _get_dev_mode():
    """ Ask whether the developer mode should be used.
    """
    while 1:
        dev_mode = raw_input('Do you want to auto-provision/recreate credentials '
                             'for developer mode (Insecure)[y/N]: ')
        dev_mode = dev_mode.strip().lower()

        if dev_mode in ('n', ''):
            return False
        elif dev_mode == 'y':
            return True

def _get_deployment_type():
    """Some amount of automation for deployment convenience """
    _DEPLOYS = ['local', 'other', 'aws', 'rackspace']
    _DEFAULT = 0


    version = raw_input('Select the deployment platform for easier auto configuration'
                    '\n{deploys}\nChoice [{0}]:'.format(_DEFAULT,
                    deploys=('\n').join('{0} -> {1}'.format(*a)
                             for a in enumerate(_DEPLOYS))))
    version = _DEFAULT if version == '' else int(version)

    return _RELEASES[version]


def _get_rosrel_version():
    """Ask which version of ROS the user wishes to deploy"""
    _DEFAULT = 0
    _RELEASES = ['fuerte', 'groovy', 'hydro (experimental)']

    version = raw_input('Select the ROS Release you wish to deploy ?'
                    '\n{releases}\nChoice [{0}]:'.format(_DEFAULT,
                    releases=('\n').join('{0} -> {1}'.format(*a)
                             for a in enumerate(_RELEASES))))
    version = _DEFAULT if version == '' else int(version)

    return _RELEASES[version].split()[0]


def _get_baserel_version():
    """Ask which version of ROS the user wishes to deploy"""
    _DEFAULT = 0
    _RELEASES = ['precise (12.04 LTS)', 'quantal (12.10)', 'raring  (13.04)']

    version = raw_input('Select the base container Ubuntu Release ?'
                    '\n{releases}\nChoice [{0}]:'.format(_DEFAULT,
                    releases=('\n').join('{0} -> {1}'.format(*a)
                             for a in enumerate(_RELEASES))))
    version = _DEFAULT if version == '' else int(version)

    return _RELEASES[version].split()[0]


def _get_container_path():
    """ Ask for path to the container root directory.
    """
    _DEFAULT = '/opt/rce/container'

    path = raw_input('Enter the root directory to store the RoboEarth '
                     'Container Filesystem [{0}]: '.format(_DEFAULT))
    path = path.strip()

    if path == '':
        return _DEFAULT

    return path


def _get_interface(channel, default):
    """ Ask for the name of the interface or IP address for the used
        communication channels.
    """
    ifname = raw_input('Enter the interface name or IP address for the '
                       '{0} communication [{1}]: '.format(channel,
                                                          default))
    ifname = ifname.strip()

    if ifname == '':
        return default

    return ifname


# Helper function for config provisioning
def provision_config(root_path, dev_mode, config_file, pw_file, rosrel, baserel, deploy):
    """ Provision settings.ini as required for first runs.
    """
    parser = SafeConfigParser()

    network = {}

    if deploy == 'aws':
        network['external_if'] = 'aws_dns'
        network['internal_if'] = 'eth0'
        network['container_if'] = 'lxcbr0'

    elif deploy == 'rackspace':
        network['external_if'] = 'eth0'
        network['internal_if'] = 'eth1'
        network['container_if'] = 'lxcbr0'

    else:
        for name, descr, default in (('external_if', 'external', 'eth0'),
                                     ('internal_if', 'internal', 'eth0'),
                                     ('container_if', 'container', 'lxcbr0')):
            network[name] = _get_interface(descr, default)

    config = {
        'global': {
            'gzip_lvl':9,
            'dev_mode':dev_mode,
            'password_file':pw_file,
            'rosrel': rosrel,
            'baserel': baserel
        },
        'network' : network,
        'converters': {
            'image':'rce.util.converters.image.ImageConverter'
        },
        'comm': {
            'http_port':9000,
            'ws_port':9010,
            'internal_port':8080,
            'external_port':8081,
            'comm_port':10030,
            'ros_proxy_port':9020
        },
        'machine': {
            'max_container':10,
            'rootfs':os.path.join(root_path, 'rootfs'),
            'conf_dir':os.path.join(root_path, 'config'),
            'data_dir':os.path.join(root_path, 'data')
        },
        'machine/packages': {
        }
    }

    for section, opts in config.iteritems():
        parser.add_section(section)
        for key, val in opts.iteritems():
            parser.set(section, key, str(val))

    path = os.path.dirname(config_file)

    if not os.path.exists(path):
        os.makedirs(path)

    with open(config_file, 'w') as f:
        parser.write(f)


# Helper function to provision the cred db
def provision_creds(dev_mode, pw_file):
    """ Provision cred database as required for first runs.
    """
    from rce.util.cred import RCECredChecker, _FIRST_RUN_MSG

    cred_checker = RCECredChecker(pw_file, True)
    required_users = {'admin':'admin', 'adminInfra':'admin'}

    if dev_mode:
        required_users['testUser'] = 'testUser'
        for username in required_users.iterkeys():
            try:
                cred_checker.getUser(username)
            except (KeyError, OSError, AttributeError):
                cred_checker.addUser(username, required_users[username],
                                     provision=True)
        cred_checker.setUserMode('admin', 0)
        cred_checker.addUserGroups('admin', 'owner')
    else:
        init_flag = True
        for username in required_users.iterkeys():
            try:
                cred_checker.getUser(username)
            except (KeyError, OSError, AttributeError):
                if init_flag:
                    print(_FIRST_RUN_MSG)
                    init_flag = False
                cred_checker.addUser(username,
                                     cred_checker.get_new_password(username),
                                     provision=True)
        cred_checker.setUserMode('admin', 0)
        cred_checker.addUserGroups('admin', 'owner')


def _get_argparse():
    from argparse import ArgumentParser

    parser = ArgumentParser(prog='provision',
                            description='Provision the base settings for the'
                            ' RoboEarth Cloud Engine ')

    parser.add_argument('mode', choices=['all', 'cred', 'config', 'container',
                                         'clean'],
                        help='Flag to select set up instead of tear down.',)

    return parser


# List of packages which should be installed in the host and
# in the container filesystem
_BASE_PREP = ('curl python-setuptools python-dev')
_HOST_PKGS = ('lxc debootstrap python-twisted-core python-openssl '
              'ros-{rosrel}-ros-comm ros-{rosrel}-common-msgs python-imaging')
_CONTAINER_PKGS = ('python-twisted-core python-twisted-web git-core python-dev '
                   'ros-{rosrel}-ros-comm ros-{rosrel}-common-msgs')

# Basic shell commands
_ROS_SRC = ("""sudo sh -c """
             """'echo "deb http://packages.ros.org/ros/ubuntu precise main" """
             """> /etc/apt/sources.list.d/ros-latest.list'""")
_ROS_KEY = 'curl http://packages.ros.org/ros.key | sudo apt-key add -'
_INSTALL = 'sudo apt-get update && sudo apt-get -y install {0}'
_CONTAINER = 'sudo bash container.bash --baserel={0} --path={1} --rosrel={2}'
_CONTAINER_CLEAN = 'sudo bash setup/container.bash --baserel={0} --clean'
_CLEAN = 'sudo rm -r {0}'


if __name__ == '__main__':
    from rce.util.settings import PATH, getSettings
    args = _get_argparse().parse_args()

    if args.mode == 'clean':
        try:
            baserel = getSettings().baserel
        except:
            candidates = os.listdir('/var/cache/lxc')
            while True:
                try:
                    choice = input('Select the cache which you wish to clean.'
                            '\n{distros}\nChoice :'.format(distros=('\n').join(
                        '{0} -> {1}'.format(*a) for a in enumerate(candidates))))
                    baserel = candidates[choice]
                    break;break
                except (NameError, IndexError):
                    pass

        check_call(_CONTAINER_CLEAN.format(baserel), shell=True,
                   cwd=os.path.dirname(sys.argv[0]))

        if not os.path.exists(PATH):
            exit(0)

        try:
            settings = getSettings()
        except ValueError:
            settings = None

        os.remove(PATH)

        if settings:
            check_call(_CLEAN.format(settings.rootfs), shell=True)
            check_call(_CLEAN.format(settings.conf_dir), shell=True)
            check_call(_CLEAN.format(settings.data_dir), shell=True)
            os.remove(settings.pw_file)

        exit(0)

    if args.mode in ('all', 'config'):
        # Ask all the necessary questions
        dev_mode = _get_dev_mode()
        container_path = _get_container_path()
        pw_file = os.path.join(os.getenv('HOME'), '.rce', 'creds')
        rosrel = _get_rosrel_version()
        baserel = _get_baserel_version()
        deploy = _get_deployment_type()


        # Build up the settings file
        provision_config(container_path, dev_mode, PATH,
                         pw_file, rosrel, baserel, deploy)
        if dev_mode:
            if os.path.exists(pw_file):
                os.remove(pw_file)
            provision_creds(dev_mode, pw_file)
    else:
        try:
            settings = getSettings()
        except:
            print ('To run this {0} mode you must have a valid configuration.'
                   'Please recreate it first.'.format(args.mode))
        dev_mode = settings.dev_mode
        container_path = os.path.dirname(settings.rootfs)
        pw_file = settings.pw_file
        rosrel = settings.rosrel
        baserel = settings.baserel

    if args.mode in ('all', 'cred'):
        # Provision the cred db
        if dev_mode:
            print ('It appears Developer  Mode is set in the config file. '
                   'Auto-provisioning default password file. '
                   'Change this option in the config to change this behavior')
        provision_creds(dev_mode, pw_file)

    if args.mode in ('all', 'container'):
        # Install the packages in the host filesystem
        for cmd in (_INSTALL.format(_BASE_PREP), _ROS_SRC, _ROS_KEY,
                    _INSTALL.format(_HOST_PKGS.format(rosrel=rosrel))):
            check_call(cmd, shell=True)

        # Create the container
        check_call(_CONTAINER.format(baserel, container_path, rosrel),
                   shell=True, cwd=os.path.dirname(sys.argv[0]))

        cmds = [
            'adduser --disabled-password --disabled-login ros',
            'adduser --disabled-password --disabled-login '
            '--home /opt/rce/data rce',
            _ROS_SRC,
            _ROS_KEY,
            _INSTALL.format(_CONTAINER_PKGS.format(rosrel=rosrel)),
            'git clone https://github.com/IDSCETHZurich/rce.git',
            'cd rce && sh install.sh'
        ]
        if dev_mode:
            cmds.append('echo "root:admin" | chpasswd')
        else:
            cmds.append('passwd -l root')

        cmds = ';'.join(cmds)

        # Provision the container filesystem
        check_call('echo "{0}" | sudo rce-make'.format(cmds), shell=True)
