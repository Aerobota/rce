#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#     setup/provision
#
#     This file is part of the RoboEarth Cloud Engine framework.
#
#     This file was originally created for RoboEearth
#     http://www.roboearth.org/
#
#     The research leading to these results has received funding from
#     the European Union Seventh Framework Programme FP7/2007-2013 under
#     grant agreement no248942 RoboEarth.
#
#     Copyright 2013 RoboEarth
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
#     \author/s: Dhananjay Sathe
#
#

# Python specific imports
import os
import sys
import readline
import glob
from subprocess import check_call
from ConfigParser import SafeConfigParser


# Setup the python interpreter path autocomplete.
def complete(text, state):
    return (glob.glob(text+'*')+[None])[state]

readline.set_completer_delims(' \t\n;')
readline.parse_and_bind("tab: complete")
readline.set_completer(complete)


# Helper function for config provisioning
def provision_config(root_path, dev_mode):
    """ Provision settings.ini as required for first runs.
    """
    parser = SafeConfigParser()
    path = os.path.join(os.getenv('HOME'), '.rce')
    config_file = os.path.join(path, 'config.ini')
    config = {
        'global': {
            'gzip_lvl':9,
            'platform':'local',
            'dev_mode':dev_mode,
            'password_file':os.path.join(path, 'creds')
        },
        'network': {
            'local':'eth0,eth0,lxcbr0',
            'rackspace':'eth0,eth1,lxcbr0',
            'aws':'aws_dns,eth0,lxcbr0'
        },
        'converters': {
            'image':'rce.util.converters.image.ImageConverter'
        },
        'comm': {
            'http_port':9000,
            'ws_port':9010,
            'master_port':8080,
            'rce_internal_port':10030,
            'rce_console_port':8081,
            'ros_proxy_port':9020
        },
        'machine': {
            'max_container':10,
            'rootfs':os.path.join(root_path, 'rootfs'),
            'conf_dir':os.path.join(root_path, 'config'),
            'data_dir':os.path.join(root_path, 'data')
        },
        'machine/packages': {
        }
    }

    for section, opts in config.iteritems():
        parser.add_section(section)
        for key, val in opts.iteritems():
            parser.set(section, key, str(val))

    if not os.path.exists(path):
        os.makedirs(path)
    
    with open(config_file, 'w') as f:
        parser.write(f)


# Helper function to provision the cred db
def provision_creds():
    """ Provision cred database as required for first runs.
    """
    from rce.util.settings import getSettings
    from rce.util.cred import RCECredChecker, _FIRST_RUN_MSG
    dev_mode = getSettings().DEV_MODE

    cred_checker = RCECredChecker(True)
    required_users = {'admin':'admin', 'adminInfra':'admin'}

    if dev_mode:
        required_users['testUser'] = 'testUser'
        for username in required_users.iterkeys():
            try:
                cred_checker.getUser(username)
            except (KeyError, OSError, AttributeError):
                cred_checker.addUser(username, required_users[username],
                                     provision=True)
        cred_checker.setUserMode('admin', 0)
        cred_checker.addUserGroups('admin', 'owner')
    else:
        init_flag = True
        for username in required_users.iterkeys():
            try:
                cred_checker.getUser(username)
            except (KeyError, OSError, AttributeError):
                if init_flag:
                    print(_FIRST_RUN_MSG)
                    init_flag = False
                cred_checker.addUser(username,
                                     cred_checker.get_new_password(username),
                                     provision=True)
        cred_checker.setUserMode('admin', 0)
        cred_checker.addUserGroups('admin', 'owner')


def _get_argparse():
    from argparse import ArgumentParser

    parser = ArgumentParser(prog='provision',
                            description='Provision the base settings for the'
                            ' RoboEarth Cloud Engine ')

    parser.add_argument('mode', choices=['all', 'cred', 'config'],
                        help='Flag to select set up instead of tear down.', )

    return parser


def _get_dev_mode():
    """ Ask whether the developer mode should be used.
    """
    dev_mode = raw_input('Do you want to autoprovision credentials '
                         'for developer mode (Insecure)[y/N] : ')
    return dev_mode.strip().lower() == 'y'


def _get_container_path():
    """ Ask for path to the container root directory.
    """
    return raw_input('Enter the root directory to store the RoboEarth '
                     'Container Filesystem [Tab to autocomplete]: ').strip()


def _add_container_directories(container_path):
    """ Add the necessary directories to the container root directory.
    """
    for folder in ('data', 'config', 'rootfs'):
        path = os.path.join(container_path, folder)
        check_call('sudo mkdir -p {0}'.format(path), shell=True)


# List of packages which should be installed in the host and 
# in the container filesystem
_HOST_PKGS = ('lxc debootstrap python-twisted-core python-openssl '
              'ros-fuerte-ros-comm ros-fuerte-common-msgs python-imaging')
_CONTAINER_PKGS = ('python-twisted-core python-twisted-web git-core '
                   'ros-fuerte-ros-comm ros-fuerte-common-msgs')

# Basic shell commands
_ROS_SRC = ("""sudo sh -c """
             """'echo "deb http://packages.ros.org/ros/ubuntu precise main" """
             """> /etc/apt/sources.list.d/ros-latest.list'""")
_ROS_KEY = 'curl http://packages.ros.org/ros.key | sudo apt-key add -'
_INSTALL = 'sudo apt-get update && sudo apt-get -y install {0}'
_CONTAINER = 'sudo bash container.bash --path={0}'


if __name__ == '__main__':
    args = _get_argparse().parse_args()

    if args.mode == 'all':
        # Ask all the necessary questions
        container_path = _get_container_path()
        dev_mode = _get_dev_mode()

        # Install the packages in the host filesystem
        for cmd in (_ROS_SRC, _ROS_KEY, _INSTALL.format(_HOST_PKGS)):
            check_call(cmd, shell=True)

        _add_container_directories(container_path)

        # build up the settings file
        provision_config(container_path, dev_mode)

        # provision the cred db
        provision_creds()

        # create the container
        check_call(_CONTAINER.format(container_path), shell=True,
                   cwd=os.path.dirname(sys.argv[0]))

        cmds = [
            'adduser --disabled-password --disabled-login ros',
            'adduser --disabled-password --disabled-login '
            '--home /opt/rce/data rce',
            _ROS_SRC,
            _ROS_KEY,
            _INSTALL.format(_CONTAINER_PKGS),
            'git clone -b reorder https://github.com/IDSCETHZurich/rce.git', #TODO : switch branches on master merge
            'cd rce && sh install.sh'
        ]
        if dev_mode:
            cmds.append('echo "root:admin" | chpasswd')
        else:
            cmds.append('passwd -l root')

        cmds = ';'.join(cmds)

        # provision the container filesystem
        check_call('echo "{0}" | sudo rce-make'.format(cmds), shell=True)
    elif args.mode == 'cred':
        provision_creds()
    elif args.mode == 'config':
        # Ask all the necessary questions
        container_path = _get_container_path()
        dev_mode = _get_dev_mode()
        
        _add_container_directories(container_path, dev_mode)
        provision_config(container_path)
    else:
        raise ValueError('Invalid mode.')
